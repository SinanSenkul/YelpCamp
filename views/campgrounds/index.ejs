<% layout('/layouts/boilerplate') %>

<link rel="stylesheet" href="/styles/style.css">

<h1>Welcome to the Yelp Camp!</h1>
<div id="map" name="indexmap" class="mb-2"></div>
<% for (el of allCampgrounds){ %>
<div class="card mb-3 border-white">
    <div class="row">
        <div class="col-md-4">
            <a href="/campgrounds/<%= el.id %>"><img class="img-fluid" src="<%= el.image[0].url %>"></a> <!-- first image uploaded will be shown -->
        </div>
        <div class="col-md-4">
            <div class="card-body">
                <p class="card-text">
                    <a href="/campgrounds/<%= el.id %>" style="text-decoration:none">
                        <p class="card-text"><%= el.description %></p>
                    </a>
                </p>
                <small class="text-muted"><%= el.city %> - <%= el.state %></small>
                <% if(currentUser && el.author.equals(currentUser._id)){ %>
                    <div class="container w-50">
                        <div class="d-flex justify-content-between">
                            <div class="m-1">
                                <form action="/campgrounds/<%= el._id %>/edit">
                                    <button class="btn btn-sm btn-outline-secondary">Edit</button>
                                </form>
                            </div>
                            <div class="m-1">
                                <form action="/campgrounds/<%= el._id %>/?_method=DELETE" method="POST">
                                    <button class="btn btn-sm btn-outline-secondary">Delete</button>
                                </form>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>
<% } %>
<br>

<script>
    mapboxgl.accessToken = '<%- process.env.MAPBOX_TOKEN %>';
    const campgrounds = {features: <%- JSON.stringify(allCampgrounds) %> };
    
    const map = new mapboxgl.Map({
        container: 'map',
        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/mapbox/outdoors-v11',
        //center: [-103.5917, 40.6699],
        center: [-14.599413, 28.673147],
        zoom: 2
    });

    map.on('load', () => {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('campgrounds', {
            type: 'geojson',
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
            data: campgrounds,
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'campgrounds',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#3a8c31',
                    100,
                    '#3a8c31',
                    750,
                    '#3a8c31'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'campgrounds',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            }
        });

        map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'campgrounds',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-color': '#3a8c31',
                'circle-radius': 4,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', (e) => {
            const features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            const clusterId = features[0].properties.cluster_id;
            map.getSource('campgrounds').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                    if (err) return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', (e) => {
            const coordinates = e.features[0].geometry.coordinates.slice();
            const link = e.features[0].properties.popUpData;
            // Ensure that if the map is zoomed out such that
            // multiple copies of the feature are visible, the
            // popup appears over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }
            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(
                    link
                )
                .addTo(map);
        });

        map.on('mouseenter', 'clusters', () => {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', () => {
            map.getCanvas().style.cursor = '';
        });
    });
</script>